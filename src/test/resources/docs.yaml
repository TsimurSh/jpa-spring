openapi: 3.0.1
info:
  title: Jpa example
servers:
  - url: http://localhost:8080
paths:
  /user/{id}/{subs}:
    put:
      tags:
        - user-controller
      operationId: bySubscription
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: subs
          in: path
          required: true
          schema:
            type: string
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
  /user/register:
    post:
      tags:
        - user-controller
      summary: üî´ register user
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /user:
    get:
      tags:
        - user-controller
      operationId: findUser
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user/{id}:
    get:
      tags:
        - user-controller
      summary: üë®üèª Find user by id
      operationId: findUser_1
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/User'
  /user/younger/{age}:
    get:
      tags:
        - user-controller
      operationId: findYoungerUsers
      parameters:
        - name: age
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user/name/{name}:
    get:
      tags:
        - user-controller
      operationId: findByName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user/employer/{name}:
    get:
      tags:
        - user-controller
      operationId: findPensionersInOrganization
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: integer
                format: int32
components:
  schemas:
    Organization:
      type: object
      properties:
        nip:
          type: integer
          format: int32
        name:
          type: string
        address:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        email:
          type: string
        password:
          type: string
        name:
          type: string
        surname:
          type: string
        balance:
          type: number
          format: float
        age:
          minimum: 0
          type: integer
          format: int32
        organization:
          $ref: '#/components/schemas/Organization'
